#include <stdio.h>
#include <Winsock2.h>
#include <ws2tcpip.h>
#include <stdint.h>
#include <chrono>
#include <thread>
#include <iostream>
#include "network.h"
#include "crc32.h"
#include "packet.h"

enum {
	NET_RC = 1,
	NET_GET_CHAN,
	NET_SET_CHAN,
	NET_WRITE,
	NET_PACKET,		/* 5 */
	NET_GET_MAC,
	NET_MAC,
	NET_GET_MONITOR,
	NET_GET_RATE,
	NET_SET_RATE,
};

int main(int argc, char **argv) {
    
    if (argc <= 1) {
        printf("please specify an input file\n");
    }

    network net(argv[1]);

    bool client = argv[2][0] == 'c';
    net.set_channel(38);
    packet p;
//    std::vector<uint8_t> test = { 0x80, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcF, 0x25, 0x6, 0x69, 0x3, 0xf, 0xc0, 0x25, 0x6, 0x69, 0x3, 0xf, 0x40, 0x6c, 0x80, 0xa1, 0xcc, 0x3b, 0xa4, 0x8, 0x0, 0x0, 0x64, 0x0, 0x31, 0x4, 0x0, 0xe, 0x46, 0x52, 0x49, 0x54, 0x5a, 0x21, 0x42, 0x6f, 0x78, 0x30, 0x33, 0x3a, 0x30, 0x46, 0x1, 0x8, 0x82, 0x84, 0x8b, 0x96, 0x8c, 0x12, 0x98, 0x24, 0x3, 0x1, 0xb, 0x5, 0x4, 0x0, 0x1, 0x0, 0x0, 0x7, 0x6, 0x44, 0x45, 0x20, 0x1, 0xd, 0x14, 0x2a, 0x1, 0x0, 0x32, 0x4, 0xb0, 0x48, 0x60, 0x6c, 0x2d, 0x1a, 0xee, 0x11, 0x1b, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3d, 0x16, 0xb, 0x7, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4a, 0xe, 0x14, 0x0, 0xa, 0x0, 0x2c, 0x1, 0xc8, 0x0, 0x14, 0x0, 0x5, 0x0, 0x19, 0x0, 0x7f, 0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0xdd, 0x18, 0x0, 0x50, 0xf2, 0x2, 0x1, 0x1, 0x1, 0x0, 0x3, 0xa4, 0x0, 0x0, 0x27, 0xa4, 0x0, 0x0, 0x42, 0x43, 0x5e, 0x0, 0x62, 0x32, 0x2f, 0x0, 0xdd, 0x9, 0x0, 0x3, 0x7f, 0x1, 0x1, 0x0, 0x0, 0xff, 0x7f, 0xdd, 0xc, 0x0, 0x4, 0xe, 0x1, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x14, 0x1, 0x0, 0x0, 0xf, 0xac, 0x2, 0x1, 0x0, 0x0, 0xf, 0xac, 0x4, 0x1, 0x0, 0x0, 0xf, 0xac, 0x2, 0x0, 0x0, 0xdd, 0x16, 0x0, 0x50, 0xf2, 0x1, 0x1, 0x0, 0x0, 0x50, 0xf2, 0x2, 0x1, 0x0, 0x0, 0x50, 0xf2, 0x2, 0x1, 0x0, 0x0, 0x50, 0xf2, 0x2, 0xdd, 0x1d, 0x0, 0x50, 0xf2, 0x4, 0x10, 0x4a, 0x0, 0x1, 0x10, 0x10, 0x44, 0x0, 0x1, 0x2, 0x10, 0x3c, 0x0, 0x1, 0x3, 0x10, 0x49, 0x0, 0x6, 0x0, 0x37, 0x2a, 0x0, 0x1, 0x20};
    std::vector<uint8_t> min_header = {
        0x08, 0x0,
        0x0, 0x0,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xcF, 0x25, 0x6, 0x69, 0x3, 0xf,
        0xc0, 0x25, 0x6, 0x69, 0x3, 0xf,
        0x00, 0x00,
        0x80, 0xa1, 0xcc, 0x3b, 0xa4, 0x8};

    std::vector<uint8_t> test(min_header);

    for (uint32_t i = 0; i < 2170; ++i) {
        test.push_back(i);
    }


    
    //crc32::append_crc32(test);
    
    //std::vector<uint8_t> test = {0xFF, 0xFF, 0x00,};
    /*for (unsigned int i = 0; i < 256; ++i) {
        test.push_back(i);
    }*/
    rx_info rxi;
    tx_info txi;
    txi.ti_rate = 54'000'000;
    net.set_rate(54'000'000);

    std::cout << "rate is " << net.get_rate() << std::endl;
    if (!client) {
        for (unsigned int i = 0; i < 4; ++i) {
            net.write(test, &txi);
        }
    }
    for (unsigned int i = 0; i < 8; ++i) {
        net.read(test, &rxi);
        std::cout << "channel " << rxi.channel << " rate " << rxi.rate << std::endl;
        /*for (unsigned int j = 0; j < test.size(); ++j) {
            std::cout << ", 0x" << std::hex << (int)test.at(j);
        }*/
        std::cout << std::endl;
    }

    addrinfo *result = nullptr, *ptr = nullptr, hints;
    
    ZeroMemory(&hints, sizeof(hints));

    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;

    WSADATA wsaData;

    int rv = WSAStartup(MAKEWORD(2, 2), &wsaData);

    if (rv != 0) {
        printf("WSAStartup failes: %d", rv);
        return 1;
    }
    


    rv = GetAddrInfo("debian", "666", &hints, &result);

    if (rv != 0) {
        printf("GetAddrInfo failed: %d", rv);
        return 1;
    }

    SOCKET sock = INVALID_SOCKET;

    sock = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (sock == INVALID_SOCKET) {
        printf("socket failes");
        return 1;
    }

    rv = connect(sock, result->ai_addr, (int)result->ai_addrlen);
    if (rv == SOCKET_ERROR) {
        printf("connect failed");
        return 1;
    }

    char buf[2048];

    *(uint8_t*)buf = NET_SET_CHAN;
    *((int32_t*)(buf + 1)) = htonl(4);
    *((uint32_t*)(buf + 5)) = htonl(36);


    rv = send(sock, buf, 9, 0);

    if (rv != 9) {
        printf("send error");
    }

    std::this_thread::sleep_for(std::chrono::milliseconds(5000));

    rv = shutdown(sock, SD_SEND);
    if (rv != 0) {
        printf("shutdown failed");
        return 1;
    }

    closesocket(sock);
    

    printf("hello");
	
}
